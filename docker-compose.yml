services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sbgs-postgres
    environment:
      POSTGRES_DB: sbgs_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      TZ: Africa/Casablanca
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sbgs_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_dist:/app/dist
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost
      - TZ=Africa/Casablanca
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - backend_next:/app/.next
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SUPER_ADMIN_SECRET=${SUPER_ADMIN_SECRET}
      - TZ=Africa/Casablanca
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/hr/get-universities"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

# Volumes
volumes:
  postgres_data:
    driver: local 
  backend_node_modules:
    driver: local
  backend_next:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_dist:
    driver: local